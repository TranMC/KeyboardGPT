name: Build & Release APK

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'CHANGELOG.md'
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Decode keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/keystore.jks

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Get version from build.gradle
        id: version
        run: |
          VERSION=$(grep "versionName" app/build.gradle | sed -E 's/.*"([^"]+)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build with Gradle
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: ./gradlew assembleRelease

      - name: Rename APK
        run: |
          mv app/build/outputs/apk/release/*.apk app/build/outputs/apk/release/KeyboardGPT.apk

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: KeyboardGPT-apk
          path: app/build/outputs/apk/release/KeyboardGPT.apk
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      VERSION: ${{ needs.build.outputs.version }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: KeyboardGPT-apk
          path: ./artifacts

      - name: List downloaded artifacts
        run: |
          echo "Found files:"
          ls -la ./artifacts/
          echo "Version: $VERSION"

      - name: Prepare release files
        run: |
          mkdir -p release_files
          cp ./artifacts/KeyboardGPT.apk ./release_files/
          ls -la ./release_files/

      - name: Create release description
        run: |
          echo "# 🎯 Thay đổi trong phiên bản này:" > release_description.md
          echo "" >> release_description.md
          
          # Lấy commit message mới nhất
          git log -1 --pretty=format:"- %s" >> release_description.md
          
          echo -e "\n### ⚙️ Thông tin build" >> release_description.md
          echo "- **Phiên bản:** v$VERSION" >> release_description.md
          echo "- **Ngày phát hành:** $(date +%d/%m/%Y)" >> release_description.md
          
          echo -e "\n### 📥 Tải về" >> release_description.md
          echo "- **⬇️ [Tải về APK](https://github.com/TranMC/KeyboardGPT/releases/download/v$VERSION/KeyboardGPT.apk)** để cài đặt trực tiếp" >> release_description.md

          echo -e "\n---" >> release_description.md
          echo "📅 Build tự động từ GitHub Actions ngày $(date +%d/%m/%Y)" >> release_description.md
          
          cat release_description.md

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ./release_files/*.apk
          tag_name: v${{ env.VERSION }}
          name: 🎯 KeyboardGPT v${{ env.VERSION }} 🚀
          body_path: ./release_description.md
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Telegram
        if: always()
        run: |
          STATUS="${{ job.status }}"
          MESSAGE="🔔 Build $STATUS\n📦 Repo: ${{ github.repository }}\n🌿 Branch: ${{ github.ref_name }}\n🏷️ Version: v${{ env.VERSION }}\n🔗 Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" -d text="$MESSAGE" -d parse_mode="Markdown"
  